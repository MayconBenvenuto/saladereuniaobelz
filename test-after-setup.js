const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;

const supabase = createClient(supabaseUrl, supabaseKey);

async function quickTest() {
  console.log('üîç TESTE R√ÅPIDO DO BANCO DE DADOS\n');
  
  try {
    // Teste 1: Verificar se tabela existe
    console.log('1Ô∏è‚É£ Verificando se tabela appointments existe...');
    const { data, error } = await supabase
      .from('appointments')
      .select('*')
      .limit(3);

    if (error) {
      console.log('‚ùå ERRO:', error.message);
      console.log('\nüîß SOLU√á√ÉO: Execute o arquivo create-table.sql no Supabase Dashboard');
      console.log('üìç Link direto: https://supabase.com/dashboard/project/dumbpqwjhawkdqlqagoo/sql');
      return false;
    }

    console.log('‚úÖ Tabela existe!');
    console.log('üìä Registros encontrados:', data.length);

    if (data.length > 0) {
      console.log('üìã Exemplo de dados:');
      data.forEach((item, index) => {
        console.log(`   ${index + 1}. ${item.title} - ${item.name} (${item.date})`);
      });
    }

    // Teste 2: Verificar se consegue inserir
    console.log('\n2Ô∏è‚É£ Testando inser√ß√£o de dados...');
    const testData = {
      title: 'Teste Autom√°tico',
      name: 'Sistema',
      date: new Date().toISOString().split('T')[0],
      start_time: '15:00:00',
      end_time: '16:00:00',
      description: 'Teste de inser√ß√£o'
    };

    const { data: inserted, error: insertError } = await supabase
      .from('appointments')
      .insert([testData])
      .select();

    if (insertError) {
      console.log('‚ùå Erro na inser√ß√£o:', insertError.message);
      return false;
    }

    console.log('‚úÖ Inser√ß√£o funcionou!');
    const newId = inserted[0].id;

    // Teste 3: Limpar dados de teste
    console.log('\n3Ô∏è‚É£ Limpando dados de teste...');
    const { error: deleteError } = await supabase
      .from('appointments')
      .delete()
      .eq('id', newId);

    if (deleteError) {
      console.log('‚ö†Ô∏è Aviso: N√£o foi poss√≠vel limpar dados de teste');
    } else {
      console.log('‚úÖ Limpeza conclu√≠da!');
    }

    // Teste 4: Verificar API endpoint
    console.log('\n4Ô∏è‚É£ Testando endpoint de disponibilidade...');
    const today = new Date().toISOString().split('T')[0];
    const { data: availability, error: availError } = await supabase
      .from('appointments')
      .select('*')
      .eq('date', today);

    if (availError) {
      console.log('‚ùå Erro no endpoint:', availError.message);
      return false;
    }

    console.log('‚úÖ Endpoint funcionando!');

    console.log('\nüéâ TODOS OS TESTES PASSARAM!');
    console.log('üöÄ Seu banco est√° pronto para o sistema de agendamentos!');
    console.log('\nüìã PR√ìXIMOS PASSOS:');
    console.log('1. Fa√ßa commit e push do c√≥digo');
    console.log('2. A Vercel far√° redeploy autom√°tico');
    console.log('3. Teste o site na URL da Vercel');
    
    return true;

  } catch (err) {
    console.error('‚ùå Erro inesperado:', err.message);
    return false;
  }
}

quickTest();
